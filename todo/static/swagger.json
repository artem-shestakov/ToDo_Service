{
  "openapi": "3.0.1",
  "info": {
    "title": "ToDo by Artem Shestakov",
    "description": "API ToDo service by Artem Shestakov",
    "version": "0.1"
  },
  "servers": [
    {
      "url": "http://localhost:5000"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentocation methods"
    },
    {
      "name": "Users",
      "description": "User's methods"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Login user and get JWT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "0": {
                  "value": "{\n    \"email\": \"user@usermail.net\",\n    \"password\": \"password\"\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDI0OTU1NTMsIm5iZiI6MTYwMjQ5NTU1MywianRpIjoiYTNjZGE0ZDUtZGJkYi00YzM3LWFiZmEtMTVjZGMxMjljYjdhIiwiZXhwIjoxNjAyNDk2NDUzLCJpZGVudGl0eSI6ImFydGVtLnMuc2hlc3Rha292QHlhbmRleC5ydSIsImZyZXNoIjpmYWxzZSwidHlwZSI6ImFjY2VzcyJ9.6pLYdWhamC1OKICPAfpbKPg1XOcr0iqdFuOhfQxMi9g\", \n  \"code\": \"200\", \n  \"message\": \"Logged in as user@usermail.net\"\n}\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid email or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"code\": \"unauthoried\",\n  \"message\": \"Unauthoried. Invalid email or password\"\n}\n"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User matching query does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"code\": \"notFound\",\n  \"message\": \"Not found. User matching query does not exist\"\n}\n"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Could not get JSON or JSON empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"code\": \"missingParameter\",\n  \"message\": \"Missing parameters. Could not get JSON or JSON empty\"\n}\n"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://localhost:5000"
          }
        ]
      },
      "servers": [
        {
          "url": "http://localhost:5000"
        }
      ]
    },
    "/api/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get all users",
        "responses": {
          "200": {
            "description": "Success getting users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "avatar": {
                            "type": "string"
                          },
                          "created": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "first_name": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "is_verified": {
                            "type": "boolean"
                          },
                          "last_name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"code\": \"success\",\n  \"users\": [\n    {\n        \"avatar\": \"5f6e05a7a550b763b47fdc2a.png\",\n        \"created\": \"2020-09-25T17:54:56.940000\",\n        \"email\": \"user01@mail.com\",\n        \"first_name\": \"Martin\",\n        \"id\": \"5f6e05a7a550b763b47fdc2a\",\n        \"is_verified\": true,\n        \"last_name\": \"Pop\"\n    },\n    {\n        \"avatar\": null,\n        \"created\": \"2020-09-25T17:54:56.940000\",\n        \"email\": \"max@mail.com\",\n        \"first_name\": \"Max\",\n        \"id\": \"4aae05a4a550b743b47fdcc2\",\n        \"is_verified\": false,\n        \"last_name\": \"Fly\"\n    }]\n}\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"msg\": \"Missing Authorization Header\"\n}\n"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Token has expired, need update token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"msg\": \"Token has expired\"\n}\n"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Signature verification failed. Invalid token(with error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"msg\": \"Signature verification failed\"\n}\n"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "0": {
                  "value": "{\n    \"email\": \"artem.s.shestakov@yandex.ru\",\n    \"password\": \"password\",\n    \"first_name\": \"Artem\",\n    \"last_name\": \"Shestakov\"\n}"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New user created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"code\": \"success\", \n  \"user\": {\n    \"avatar\": null, \n    \"created\": \"2020-10-12T12:38:58.064930\", \n    \"email\": \"artem.s.shestakov@gmail.com\", \n    \"first_name\": \"Artem\", \n    \"id\": \"5f8424e7dfce5c612fe35c9c\", \n    \"is_verified\": false, \n    \"last_name\": \"Shestakov\"\n  }\n}\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"msg\": \"Missing Authorization Header\"\n}\n"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Token has expired, need update token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"msg\": \"Token has expired\"\n}\n"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Signature verification failed. Invalid token(with error)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"msg\": \"Signature verification failed\"\n}\n"
                  }
                }
              }
            }
          },
          "500": {
            "description": "User with this email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"code\": \"serverError\", \n  \"message\": \"Server error. Tried to save duplicate unique keys (E11000 duplicate key error collection: todo.user index: email_1 dup key: { email: \\\"artem.s.shestakov@yandex.ru\\\" }, full error: {'index': 0, 'code': 11000, 'keyPattern': {'email': 1}, 'keyValue': {'email': 'artem.s.shestakov@yandex.ru'}, 'errmsg': 'E11000 duplicate key error collection: todo.user index: email_1 dup key: { email: \\\"artem.s.shestakov@yandex.ru\\\" }'})\"\n}\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{user_id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Update user profile",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid user ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "0": {
                    "value": "{\n  \"message\": \"Bad request. '5f6e05a7a550b763b47fdc2addd1542e947e9' is not a valid ObjectId, it must be a 12-byte input or a 24-character hex string\",\n  \"type\": \"badRequest\"\n}\n"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "User": {
        "properties": {
          "id": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "is_verified": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}